services:

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    networks:
      - app-network

  kafka-serv:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-serv:9092,PLAINTEXT_HOST://kafka-serv:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - app-network

  jaeger:
    image: jaegertracing/all-in-one:1.29
    ports:
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: data_pipeline
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  # Microservices
  producer-service:
    build:
      context: ./producer-service
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      KAFKA_BROKER: kafka-serv:29092
      JAEGER_AGENT_HOST: jaeger
    depends_on:
      - kafka-serv
      - jaeger
    networks:
      - app-network

  consumer-service:
    build:
      context: ./consumer-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      KAFKA_BROKER: kafka-serv:29092
      STORAGE_URL: "http://storage-service:8082/store"  # Use internal Docker DNS
      JAEGER_AGENT_HOST: jaeger
    depends_on:
      - kafka-serv
      - jaeger
    networks:
      - app-network

  storage-service:
    build:
      context: ./storage-service
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      DB_HOST: "postgres"
      DB_PORT: "5432"
      DB_USER: "postgres"
      DB_PASSWORD: "password"
      DB_NAME: "data_pipeline"
      JAEGER_AGENT_HOST: "jaeger"
    depends_on:
      - postgres
      - jaeger
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data: